# =====================================================================================
# üìò SCRIPT : Gestion des cong√©s des Employ√©s
# üóÇÔ∏è Connexion √† la base de donn√©es RH (MySQL)
# üõ†Ô∏è Utilisation de SQLAlchemy ORM pour la cr√©ation et manipulation des donn√©es
# =====================================================================================


# ======================== des biblioth√®ques et des modules √† importer ================================
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os

# pour la connection a la base de donnees 
#  create_engine ==> cr√©e la connexion
from sqlalchemy import create_engine,inspect, Column,Integer,String,Date,Enum,ForeignKey

# orm ==>manipuler les BDD avec des classes
# declarative_base ==> declarer des tables  pour cr√©er des classes qui representent des tables de la base de donn√©es
# sessiomaker ==> cr√©er es session pour intergir avec les BDD ( insertion , requete)  
from sqlalchemy.orm import declarative_base,sessionmaker

import pymysql

# ============================ informations de connexion a la base  Mysql ============================
host="localhost"
port="3306"
DB_name="sample_rh"
username="root"
password="root"

# ============================ creer une URL de connexion pour Mysql ===============================

try:
    engine=create_engine(f'mysql+pymysql://{username}:{password}@{host}:{port}/{DB_name}')
    connection=engine.connect()
    print("\n ‚úÖ  la connexion est bien r√©ussie a la base de donn√©es ")

# ======================== connexion a la base de donn√©es RH ====================================
    # lister les tables de la base de donn√©es avec inspect
    # la methode inspect permet de d'inspecter la structure de la abase de donn√©es (tables, colonnes , types , cl√©s primaires)
    inspector=inspect(engine)
    # listes des tables existantes 
    tables=inspector.get_table_names()
    print("\n üìã Tables disponibles :")
    for table in tables:
        print(f" -{table}")

    # afficher les 5 premiers lignes de chaque table
    for table in tables:
        print(f"\n üîç Aper√ßu des 5 premiers lignes de la table : {table}")
        DF=pd.read_sql(f"select * from {table} limit 5",engine)
        print(DF)
    # afficher les colonnes des  tables 
    columns=inspector.get_columns('employes')
    print("\n üß± les colonnes de la table employes :")
    for column in columns:
        print(f"- {column['name']}({column['type']})")
except Exception as e:
    print("\n‚ùå error lors de la connexion a la base de donn√©es ")
    print (e)
    # lecture d'une table de la base de donn√©es
print("\n le contenu de la tabe employees :\n")
DF_employee=pd.read_sql('select * from employes', engine)
print(DF_employee.head())

print("\n le contenu de la tabe regions :\n")
DF_regions=pd.read_sql('select * from regions',engine)
print(DF_regions.head())

try:
    # definir  la table cong√©s avec ORM
    # declaration de la base ORM
    Base=declarative_base()
    # declaration de la class employee
    # Classe de liaison minimale pour d√©finir la table employees (juste pour permettre la cl√© √©trang√®re).
    class employes(Base):
        __tablename__='employes'
        id=Column(Integer,primary_key=True)
    # declaration de la classe cong√©s 
    class conges(Base):
        __tablename__='conges'
        id=Column(Integer,primary_key=True,autoincrement=True)
        employe_id =Column(Integer,ForeignKey('employes.id'))
        type_conge=Column(String(20))
        date_debut=Column(Date)
        date_fin=Column(Date)
        statut=Column(Enum('en cours','valid√©','refus√©','en attente','termin√©',name='conge_statut'))

   
    # Cr√©e physiquement la table cong√©s dans la base de donn√©es.
    Base.metadata.create_all(engine)
    print("\n la table conges a bien √©t√© cr√©er ")
    # Cr√©e une session pour interagir avec la base de donn√©es.
    Session = sessionmaker(bind=engine)
    session = Session()

    """ new_conge=conges(
        employe_id=14,
        type_conge="Cong√© maternit√©",
        date_debut="2024-01-01",
        date_fin="2024-04-29",
        statut="termin√©"
    )
    session.add(new_conge)
    session.commit()"""
    #  fonction d'insertion de donn√©es dans la table cong√©s 
    def ajouter_conge(session,liste_conges):
        try:
            objets_conges=[
                conges(
                    employe_id=donnee['employe_id'],
                    type_conge =donnee['type_conge'],
                    date_debut=donnee['date_debut'],
                    date_fin=donnee['date_fin'],
                    statut=donnee['statut']
                )
                for donnee in liste_conges
            ]
            session.add_all(objets_conges)
            session.commit()
            print("\‚úÖ conge ajout√©es avec succ√®s")
        except Exception as e:
            session.rollback()
            print("‚ùå erreur lors d'insertion ",e)
    def lire_conges(session):
        try:
            # requete pour lire toutes les lignes de la table cong√©s
            resultats=session.query(conges).all()
            print("\n üìÑ Liste des cong√©s enregistr√©es :\n")
            for conge in resultats:
                print(f"ID:{conge.id},Employ√©:{conge.employe_id},"
                      f"Type_conge:{conge.type_conge},",
                      f"statut:{conge.statut}")
        except Exception as e:
            print("‚ùå Erreur lors de la lecture des donn√©es :", e)

# ============================================ filtrer les donn√©es ========================================

    def filtrer_conges(session,statut=None):
        try:
            requete=session.query(conges)
            if statut:
                requete=requete.filter(conges.statut==statut)
            resultats=requete.all()
            print("\nüîç R√©sultats du filtre :\n")
            if not resultats:
                print("Aucune conge trouv√©e avec les crit√®res donn√©s.")
            else:
                for conge in resultats:
                    print(f"- ID: {conge.id},"
                        f"Employ√©: {conge.employe_id},"
                        f" Type_conge: {conge.type_conge}, "
                        f"D√©but: {conge.date_debut},"
                        f"Fin: {conge.date_fin},"
                        f"Statut: {conge.statut}")
        except Exception as e:
            print("‚ùå Erreur lors du filtrage :", e)
    
except Exception as e:
    print("\n erreur d'insertion de donn√©es ")

# =================================== exmple d'insertion dans la table cong√©s =================================

# liste_conges == > une liste de dictionnaires // chaque dictionnaire est une cong√©s
liste_conges=[
    {
        'employe_id':14,
        'type_conge':'Cong√© maternit√©',
        'date_debut':'2024-01-01',
        'date_fin':'2024-04-29',
        'statut':'termin√©'
    },
    { 
        'employe_id':53,
        'type_conge':'Cong√© annuel',
        'date_debut':'2025-08-01',
        'date_fin':'2025-08-15',
        'statut':'valid√©'
    },
    {
        'employe_id':173,
        'type_conge':'Cong√© maladie',
        'date_debut':'2025-05-20',
        'date_fin':'2025-06-03',
        'statut':'termin√©'
    },
    {
        'employe_id':397,
        'type_conge':'Cong√© paternit√©',
        'date_debut':'2025-08-01',
        'date_fin':'2025-08-15',
        'statut':'en attente'
    }

]
# ajout des cong√©s 
ajouter_conge(session,liste_conges)

# lecture des cong√©s
lire_conges(session)

# Filtrer les cong√©s "termin√©" 
filtrer_conges(session,statut="termin√©")
